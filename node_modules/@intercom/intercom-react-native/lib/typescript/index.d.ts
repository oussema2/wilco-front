import { EmitterSubscription } from 'react-native';
export declare type Registration = Partial<{
    email: string;
    userId: string;
}>;
export declare enum Visibility {
    GONE = "GONE",
    VISIBLE = "VISIBLE"
}
declare type VisibilityType = keyof typeof Visibility;
export declare enum LogLevel {
    ASSERT = "ASSERT",
    DEBUG = "DEBUG",
    DISABLED = "DISABLED",
    ERROR = "ERROR",
    INFO = "INFO",
    VERBOSE = "VERBOSE",
    WARN = "WARN"
}
declare type LogLevelType = keyof typeof LogLevel;
export declare const IntercomEvents: {
    IntercomUnreadCountDidChange: any;
    IntercomWindowDidHide: any;
    IntercomWindowDidShow: any;
    IntercomHelpCenterWindowDidShow: any;
    IntercomHelpCenterWindowDidHide: any;
};
declare type EventType = 'IntercomUnreadConversationCountDidChangeNotification' | 'IntercomHelpCenterDidShowNotification' | 'IntercomHelpCenterDidHideNotification' | 'IntercomWindowDidHideNotification' | 'IntercomWindowDidShowNotification';
export declare type CustomAttributes = {
    [key: string]: boolean | string | number;
};
export declare type MetaData = {
    [key: string]: any;
};
export declare type UpdateUserParamList = {
    companies?: Company[];
    customAttributes?: CustomAttributes;
    email?: string;
    languageOverride?: string;
    name?: string;
    phone?: string;
    signedUpAt?: number;
    unsubscribedFromEmails?: boolean;
    userId?: string;
};
export declare type Company = {
    createdAt?: number;
    customAttributes?: CustomAttributes;
    id: string;
    monthlySpend?: number;
    name?: string;
    plan?: string;
};
export declare type HelpCenterArticle = {
    it: string;
    title: string;
};
export declare type HelpCenterSection = {
    title: string;
    articles: HelpCenterArticle;
};
export declare type HelpCenterCollectionItem = {
    id: string;
    title: string;
    summary: string;
};
export declare type HelpCenterCollectionContent = {
    id: string;
    title: string;
    summary: string;
    articles: HelpCenterArticle[];
    sections: HelpCenterSection[];
};
export declare type HelpCenterArticleSearchResult = {
    id: string;
    title: string;
    matchingSnippet: string;
    summary: string;
};
export declare type IntercomType = {
    fetchHelpCenterCollections: () => Promise<HelpCenterCollectionItem>;
    searchHelpCenter: (term: string) => Promise<HelpCenterArticleSearchResult>;
    fetchHelpCenterCollection: (id: string) => Promise<HelpCenterCollectionContent>;
    displayArticle(articleId: string): Promise<boolean>;
    displayCarousel(carouselId: string): Promise<boolean>;
    displayHelpCenter(): Promise<boolean>;
    displayHelpCenterCollections(collections?: string[]): Promise<boolean>;
    displayMessageComposer(initialMessage?: string): Promise<boolean>;
    displayMessenger(): Promise<boolean>;
    getUnreadConversationCount(): Promise<number>;
    hideIntercom(): Promise<boolean>;
    logEvent(eventName: string, metaData?: MetaData): Promise<boolean>;
    logout(): Promise<boolean>;
    registerIdentifiedUser(params: Registration): Promise<boolean>;
    registerUnidentifiedUser(): Promise<boolean>;
    setBottomPadding(bottomPadding: number): Promise<boolean>;
    setInAppMessageVisibility(visibility: VisibilityType): Promise<boolean>;
    setLauncherVisibility(visibility: VisibilityType): Promise<boolean>;
    setLogLevel(logLevel: LogLevelType): Promise<boolean>;
    setUserHash(hash: string): Promise<boolean>;
    updateUser(params: UpdateUserParamList): Promise<boolean>;
    handlePushMessage(): Promise<boolean>;
    sendTokenToIntercom(token: string): Promise<boolean>;
    addEventListener: (event: EventType, callback: (response: {
        count?: number;
        visible: boolean;
    }) => void) => EmitterSubscription;
};
declare const Intercom: IntercomType;
export default Intercom;
