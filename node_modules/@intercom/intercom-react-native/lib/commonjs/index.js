"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IntercomEvents = exports.LogLevel = exports.Visibility = void 0;

var _reactNative = require("react-native");

const {
  IntercomModule,
  IntercomEventEmitter
} = _reactNative.NativeModules;
let Visibility;
exports.Visibility = Visibility;

(function (Visibility) {
  Visibility["GONE"] = "GONE";
  Visibility["VISIBLE"] = "VISIBLE";
})(Visibility || (exports.Visibility = Visibility = {}));

let LogLevel;
exports.LogLevel = LogLevel;

(function (LogLevel) {
  LogLevel["ASSERT"] = "ASSERT";
  LogLevel["DEBUG"] = "DEBUG";
  LogLevel["DISABLED"] = "DISABLED";
  LogLevel["ERROR"] = "ERROR";
  LogLevel["INFO"] = "INFO";
  LogLevel["VERBOSE"] = "VERBOSE";
  LogLevel["WARN"] = "WARN";
})(LogLevel || (exports.LogLevel = LogLevel = {}));

const IntercomEvents = {
  IntercomUnreadCountDidChange: IntercomEventEmitter.UNREAD_COUNT_CHANGE_NOTIFICATION,
  IntercomWindowDidHide: IntercomEventEmitter.WINDOW_DID_HIDE_NOTIFICATION,
  IntercomWindowDidShow: IntercomEventEmitter.WINDOW_DID_SHOW_NOTIFICATION,
  IntercomHelpCenterWindowDidShow: IntercomEventEmitter.HELP_CENTER_WINDOW_DID_SHOW_NOTIFICATION,
  IntercomHelpCenterWindowDidHide: IntercomEventEmitter.HELP_CENTER_WINDOW_DID_HIDE_NOTIFICATION
};
exports.IntercomEvents = IntercomEvents;
const Intercom = {
  searchHelpCenter: (term = '') => IntercomModule.searchHelpCenter(term),
  fetchHelpCenterCollections: () => IntercomModule.fetchHelpCenterCollections(),
  fetchHelpCenterCollection: (id = '') => IntercomModule.fetchHelpCenterCollection(id),
  displayArticle: articleId => IntercomModule.displayArticle(articleId),
  displayCarousel: carouselId => IntercomModule.displayCarousel(carouselId),
  displayHelpCenter: () => IntercomModule.displayHelpCenter(),
  displayHelpCenterCollections: (collections = []) => IntercomModule.displayHelpCenterCollections(collections),
  displayMessageComposer: (initialMessage = undefined) => IntercomModule.displayMessageComposer(initialMessage),
  displayMessenger: () => IntercomModule.displayMessenger(),
  getUnreadConversationCount: () => IntercomModule.getUnreadConversationCount(),
  handlePushMessage: _reactNative.Platform.select({
    android: IntercomModule.handlePushMessage,
    default: async () => true
  }),
  hideIntercom: () => IntercomModule.hideIntercom(),
  logEvent: (eventName, metaData = undefined) => IntercomModule.logEvent(eventName, metaData),
  logout: () => IntercomModule.logout(),
  registerIdentifiedUser: eventName => IntercomModule.registerIdentifiedUser(eventName),
  registerUnidentifiedUser: () => IntercomModule.registerUnidentifiedUser(),
  setBottomPadding: paddingBottom => IntercomModule.setBottomPadding(paddingBottom),
  setInAppMessageVisibility: visibility => IntercomModule.setInAppMessageVisibility(visibility),
  setLauncherVisibility: visibility => IntercomModule.setLauncherVisibility(visibility),
  setLogLevel: logLevel => IntercomModule.setLogLevel(logLevel),
  setUserHash: hash => IntercomModule.setUserHash(hash),
  updateUser: params => IntercomModule.updateUser(params),
  sendTokenToIntercom: token => IntercomModule.sendTokenToIntercom(token),
  addEventListener: (event, callback) => {
    event === IntercomEvents.IntercomUnreadCountDidChange && _reactNative.Platform.OS === 'android' && IntercomEventEmitter.startEventListener();
    const eventEmitter = new _reactNative.NativeEventEmitter(IntercomEventEmitter);
    const listener = eventEmitter.addListener(event, callback);
    return { ...listener,
      remove: () => {
        event === IntercomEvents.IntercomUnreadCountDidChange && _reactNative.Platform.OS === 'android' && IntercomEventEmitter.removeEventListener();
        listener.remove();
      }
    };
  }
};
var _default = Intercom;
exports.default = _default;
//# sourceMappingURL=index.js.map