{"version":3,"sources":["index.tsx"],"names":["IntercomModule","IntercomEventEmitter","NativeModules","Visibility","LogLevel","IntercomEvents","IntercomUnreadCountDidChange","UNREAD_COUNT_CHANGE_NOTIFICATION","IntercomWindowDidHide","WINDOW_DID_HIDE_NOTIFICATION","IntercomWindowDidShow","WINDOW_DID_SHOW_NOTIFICATION","IntercomHelpCenterWindowDidShow","HELP_CENTER_WINDOW_DID_SHOW_NOTIFICATION","IntercomHelpCenterWindowDidHide","HELP_CENTER_WINDOW_DID_HIDE_NOTIFICATION","Intercom","searchHelpCenter","term","fetchHelpCenterCollections","fetchHelpCenterCollection","id","displayArticle","articleId","displayCarousel","carouselId","displayHelpCenter","displayHelpCenterCollections","collections","displayMessageComposer","initialMessage","undefined","displayMessenger","getUnreadConversationCount","handlePushMessage","Platform","select","android","default","hideIntercom","logEvent","eventName","metaData","logout","registerIdentifiedUser","registerUnidentifiedUser","setBottomPadding","paddingBottom","setInAppMessageVisibility","visibility","setLauncherVisibility","setLogLevel","logLevel","setUserHash","hash","updateUser","params","sendTokenToIntercom","token","addEventListener","event","callback","OS","startEventListener","eventEmitter","NativeEventEmitter","listener","addListener","remove","removeEventListener"],"mappings":"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","sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  Platform,\n  EmitterSubscription,\n} from 'react-native';\n\nconst { IntercomModule, IntercomEventEmitter } = NativeModules;\n\nexport type Registration = Partial<{\n  email: string;\n  userId: string;\n}>;\n\nexport enum Visibility {\n  GONE = 'GONE',\n  VISIBLE = 'VISIBLE',\n}\n\ntype VisibilityType = keyof typeof Visibility;\n\nexport enum LogLevel {\n  ASSERT = 'ASSERT',\n  DEBUG = 'DEBUG',\n  DISABLED = 'DISABLED',\n  ERROR = 'ERROR',\n  INFO = 'INFO',\n  VERBOSE = 'VERBOSE',\n  WARN = 'WARN',\n}\n\ntype LogLevelType = keyof typeof LogLevel;\n\nexport const IntercomEvents = {\n  IntercomUnreadCountDidChange:\n    IntercomEventEmitter.UNREAD_COUNT_CHANGE_NOTIFICATION,\n  IntercomWindowDidHide: IntercomEventEmitter.WINDOW_DID_HIDE_NOTIFICATION,\n  IntercomWindowDidShow: IntercomEventEmitter.WINDOW_DID_SHOW_NOTIFICATION,\n  IntercomHelpCenterWindowDidShow:\n    IntercomEventEmitter.HELP_CENTER_WINDOW_DID_SHOW_NOTIFICATION,\n  IntercomHelpCenterWindowDidHide:\n    IntercomEventEmitter.HELP_CENTER_WINDOW_DID_HIDE_NOTIFICATION,\n};\n\ntype EventType =\n  | 'IntercomUnreadConversationCountDidChangeNotification'\n  | 'IntercomHelpCenterDidShowNotification'\n  | 'IntercomHelpCenterDidHideNotification'\n  | 'IntercomWindowDidHideNotification'\n  | 'IntercomWindowDidShowNotification';\n\nexport type CustomAttributes = {\n  [key: string]: boolean | string | number;\n};\nexport type MetaData = {\n  [key: string]: any;\n};\n\nexport type UpdateUserParamList = {\n  companies?: Company[];\n  customAttributes?: CustomAttributes;\n  email?: string;\n  languageOverride?: string;\n  name?: string;\n  phone?: string;\n  signedUpAt?: number;\n  unsubscribedFromEmails?: boolean;\n  userId?: string;\n};\n\nexport type Company = {\n  createdAt?: number;\n  customAttributes?: CustomAttributes;\n  id: string;\n  monthlySpend?: number;\n  name?: string;\n  plan?: string;\n};\n\nexport type HelpCenterArticle = { it: string; title: string };\nexport type HelpCenterSection = { title: string; articles: HelpCenterArticle };\nexport type HelpCenterCollectionItem = {\n  id: string;\n  title: string;\n  summary: string;\n};\nexport type HelpCenterCollectionContent = {\n  id: string;\n  title: string;\n  summary: string;\n  articles: HelpCenterArticle[];\n  sections: HelpCenterSection[];\n};\nexport type HelpCenterArticleSearchResult = {\n  id: string;\n  title: string;\n  matchingSnippet: string;\n  summary: string;\n};\n\nexport type IntercomType = {\n  fetchHelpCenterCollections: () => Promise<HelpCenterCollectionItem>;\n  searchHelpCenter: (term: string) => Promise<HelpCenterArticleSearchResult>;\n  fetchHelpCenterCollection: (\n    id: string\n  ) => Promise<HelpCenterCollectionContent>;\n  displayArticle(articleId: string): Promise<boolean>;\n  displayCarousel(carouselId: string): Promise<boolean>;\n  displayHelpCenter(): Promise<boolean>;\n  displayHelpCenterCollections(collections?: string[]): Promise<boolean>;\n  displayMessageComposer(initialMessage?: string): Promise<boolean>;\n  displayMessenger(): Promise<boolean>;\n  getUnreadConversationCount(): Promise<number>;\n  hideIntercom(): Promise<boolean>;\n  logEvent(eventName: string, metaData?: MetaData): Promise<boolean>;\n  logout(): Promise<boolean>;\n  registerIdentifiedUser(params: Registration): Promise<boolean>;\n  registerUnidentifiedUser(): Promise<boolean>;\n  setBottomPadding(bottomPadding: number): Promise<boolean>;\n  setInAppMessageVisibility(visibility: VisibilityType): Promise<boolean>;\n  setLauncherVisibility(visibility: VisibilityType): Promise<boolean>;\n  setLogLevel(logLevel: LogLevelType): Promise<boolean>;\n  setUserHash(hash: string): Promise<boolean>;\n  updateUser(params: UpdateUserParamList): Promise<boolean>;\n  handlePushMessage(): Promise<boolean>;\n  sendTokenToIntercom(token: string): Promise<boolean>;\n  addEventListener: (\n    event: EventType,\n    callback: (response: { count?: number; visible: boolean }) => void\n  ) => EmitterSubscription;\n};\n\nconst Intercom = {\n  searchHelpCenter: (term = '') => IntercomModule.searchHelpCenter(term),\n  fetchHelpCenterCollections: () => IntercomModule.fetchHelpCenterCollections(),\n  fetchHelpCenterCollection: (id = '') =>\n    IntercomModule.fetchHelpCenterCollection(id),\n  displayArticle: (articleId: string) =>\n    IntercomModule.displayArticle(articleId),\n  displayCarousel: (carouselId: string) =>\n    IntercomModule.displayCarousel(carouselId),\n  displayHelpCenter: () => IntercomModule.displayHelpCenter(),\n  displayHelpCenterCollections: (collections = [] as string[]) =>\n    IntercomModule.displayHelpCenterCollections(collections),\n  displayMessageComposer: (initialMessage = undefined) =>\n    IntercomModule.displayMessageComposer(initialMessage),\n  displayMessenger: () => IntercomModule.displayMessenger(),\n  getUnreadConversationCount: () => IntercomModule.getUnreadConversationCount(),\n  handlePushMessage: Platform.select({\n    android: IntercomModule.handlePushMessage,\n    default: async () => true,\n  }),\n  hideIntercom: () => IntercomModule.hideIntercom(),\n  logEvent: (eventName, metaData = undefined) =>\n    IntercomModule.logEvent(eventName, metaData),\n  logout: () => IntercomModule.logout(),\n  registerIdentifiedUser: (eventName) =>\n    IntercomModule.registerIdentifiedUser(eventName),\n  registerUnidentifiedUser: () => IntercomModule.registerUnidentifiedUser(),\n  setBottomPadding: (paddingBottom) =>\n    IntercomModule.setBottomPadding(paddingBottom),\n  setInAppMessageVisibility: (visibility) =>\n    IntercomModule.setInAppMessageVisibility(visibility),\n  setLauncherVisibility: (visibility) =>\n    IntercomModule.setLauncherVisibility(visibility),\n  setLogLevel: (logLevel) => IntercomModule.setLogLevel(logLevel),\n  setUserHash: (hash) => IntercomModule.setUserHash(hash),\n  updateUser: (params) => IntercomModule.updateUser(params),\n  sendTokenToIntercom: (token) => IntercomModule.sendTokenToIntercom(token),\n  addEventListener: (event, callback) => {\n    event === IntercomEvents.IntercomUnreadCountDidChange &&\n      Platform.OS === 'android' &&\n      IntercomEventEmitter.startEventListener();\n    const eventEmitter = new NativeEventEmitter(IntercomEventEmitter);\n    const listener = eventEmitter.addListener(event, callback);\n    return {\n      ...listener,\n      remove: () => {\n        event === IntercomEvents.IntercomUnreadCountDidChange &&\n          Platform.OS === 'android' &&\n          IntercomEventEmitter.removeEventListener();\n        listener.remove();\n      },\n    };\n  },\n} as IntercomType;\n\nexport default Intercom;\n"]}