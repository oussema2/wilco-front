{"version":3,"sources":["fileTypes.ts"],"names":["mimeTypes","Object","freeze","allFiles","audio","csv","doc","docx","images","pdf","plainText","ppt","pptx","video","xls","xlsx","zip","utis","extensions","perPlatformTypes","android","ios","windows","macos","web","mimesAndUtisAreEqual","mimesAndExtensionsAreEqual","typesAreEqual"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC9BC,EAAAA,QAAQ,EAAE,KADoB;AAE9BC,EAAAA,KAAK,EAAE,SAFuB;AAG9BC,EAAAA,GAAG,EAAE,UAHyB;AAI9BC,EAAAA,GAAG,EAAE,oBAJyB;AAK9BC,EAAAA,IAAI,EAAE,yEALwB;AAM9BC,EAAAA,MAAM,EAAE,SANsB;AAO9BC,EAAAA,GAAG,EAAE,iBAPyB;AAQ9BC,EAAAA,SAAS,EAAE,YARmB;AAS9BC,EAAAA,GAAG,EAAE,+BATyB;AAU9BC,EAAAA,IAAI,EAAE,2EAVwB;AAW9BC,EAAAA,KAAK,EAAE,SAXuB;AAY9BC,EAAAA,GAAG,EAAE,0BAZyB;AAa9BC,EAAAA,IAAI,EAAE,mEAbwB;AAc9BC,EAAAA,GAAG,EAAE;AAdyB,CAAd,CAAlB;AAiBA,MAAMC,IAAI,GAAGhB,MAAM,CAACC,MAAP,CAAc;AACzBC,EAAAA,QAAQ,EAAE,aADe;AAEzBC,EAAAA,KAAK,EAAE,cAFkB;AAGzBC,EAAAA,GAAG,EAAE,oCAHoB;AAIzBC,EAAAA,GAAG,EAAE,wBAJoB;AAKzBC,EAAAA,IAAI,EAAE,8CALmB;AAMzBC,EAAAA,MAAM,EAAE,cANiB;AAOzBC,EAAAA,GAAG,EAAE,eAPoB;AAQzBC,EAAAA,SAAS,EAAE,mBARc;AASzBC,EAAAA,GAAG,EAAE,8BAToB;AAUzBC,EAAAA,IAAI,EAAE,gDAVmB;AAWzBC,EAAAA,KAAK,EAAE,cAXkB;AAYzBC,EAAAA,GAAG,EAAE,yBAZoB;AAazBC,EAAAA,IAAI,EAAE,wCAbmB;AAczBC,EAAAA,GAAG,EAAE;AAdoB,CAAd,CAAb;AAiBA,MAAME,UAAU,GAAGjB,MAAM,CAACC,MAAP,CAAc;AAC/BC,EAAAA,QAAQ,EAAE,GADqB;AAE/BC,EAAAA,KAAK,EACH,uHAH6B;AAI/BC,EAAAA,GAAG,EAAE,MAJ0B;AAK/BC,EAAAA,GAAG,EAAE,MAL0B;AAM/BC,EAAAA,IAAI,EAAE,OANyB;AAO/BC,EAAAA,MAAM,EAAE,iBAPuB;AAQ/BC,EAAAA,GAAG,EAAE,MAR0B;AAS/BC,EAAAA,SAAS,EAAE,MAToB;AAU/BC,EAAAA,GAAG,EAAE,MAV0B;AAW/BC,EAAAA,IAAI,EAAE,OAXyB;AAY/BC,EAAAA,KAAK,EAAE,MAZwB;AAa/BC,EAAAA,GAAG,EAAE,MAb0B;AAc/BC,EAAAA,IAAI,EAAE,OAdyB;AAe/BC,EAAAA,GAAG,EAAE;AAf0B,CAAd,CAAnB;AAyBA,OAAO,MAAMG,gBAAgB,GAAG;AAC9BC,EAAAA,OAAO,EAAEpB,SADqB;AAE9BqB,EAAAA,GAAG,EAAEJ,IAFyB;AAG9BK,EAAAA,OAAO,EAAEJ,UAHqB;AAI9B;AACAK,EAAAA,KAAK,EAAEL,UALuB;AAM9BM,EAAAA,GAAG,EAAEN;AANyB,CAAzB,C,CASP;AACA;;AASA,MAAMO,oBAAoE,GAAG,IAA7E;AACA,MAAMC,0BAAgF,GAAG,IAAzF;AACA,OAAO,MAAMC,aAAa,GAAGF,oBAAoB,IAAIC,0BAA9C","sourcesContent":["const mimeTypes = Object.freeze({\n  allFiles: '*/*',\n  audio: 'audio/*',\n  csv: 'text/csv',\n  doc: 'application/msword',\n  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  images: 'image/*',\n  pdf: 'application/pdf',\n  plainText: 'text/plain',\n  ppt: 'application/vnd.ms-powerpoint',\n  pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  video: 'video/*',\n  xls: 'application/vnd.ms-excel',\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip',\n} as const)\n\nconst utis = Object.freeze({\n  allFiles: 'public.item',\n  audio: 'public.audio',\n  csv: 'public.comma-separated-values-text',\n  doc: 'com.microsoft.word.doc',\n  docx: 'org.openxmlformats.wordprocessingml.document',\n  images: 'public.image',\n  pdf: 'com.adobe.pdf',\n  plainText: 'public.plain-text',\n  ppt: 'com.microsoft.powerpoint.ppt',\n  pptx: 'org.openxmlformats.presentationml.presentation',\n  video: 'public.movie',\n  xls: 'com.microsoft.excel.xls',\n  xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n  zip: 'public.zip-archive',\n} as const)\n\nconst extensions = Object.freeze({\n  allFiles: '*',\n  audio:\n    '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n  csv: '.csv',\n  doc: '.doc',\n  docx: '.docx',\n  images: '.jpeg .jpg .png',\n  pdf: '.pdf',\n  plainText: '.txt',\n  ppt: '.ppt',\n  pptx: '.pptx',\n  video: '.mp4',\n  xls: '.xls',\n  xlsx: '.xlsx',\n  zip: '.zip .gz',\n} as const)\n\nexport type PlatformTypes = {\n  android: typeof mimeTypes\n  ios: typeof utis\n  windows: typeof extensions\n}\nexport type SupportedPlatforms = 'ios' | 'android' | 'windows'\n\nexport const perPlatformTypes = {\n  android: mimeTypes,\n  ios: utis,\n  windows: extensions,\n  // unsupported, but added to make TS happy\n  macos: extensions,\n  web: extensions,\n}\n\n// ensure shapes of platformTypes are the same: https://stackoverflow.com/a/67027347/2070942\n// let me know if there's a nicer way\n\ntype AssertEqualKeys<T1 extends object, T2 extends object> = [\n  keyof T1 extends keyof T2 ? 1 : 0,\n  keyof T2 extends keyof T1 ? 1 : 0,\n] extends [1, 1]\n  ? true\n  : false\n\nconst mimesAndUtisAreEqual: AssertEqualKeys<typeof mimeTypes, typeof utis> = true\nconst mimesAndExtensionsAreEqual: AssertEqualKeys<typeof mimeTypes, typeof extensions> = true\nexport const typesAreEqual = mimesAndUtisAreEqual && mimesAndExtensionsAreEqual\n"]}