{"version":3,"sources":["index.tsx"],"names":["Platform","NativeModules","invariant","perPlatformTypes","types","OS","RNDocumentPicker","pickDirectory","params","result","pick","mode","allowMultiSelection","type","uri","pickMultiple","opts","options","pickSingle","then","results","allFiles","newOpts","presentationStyle","Array","isArray","doPick","every","length","includes","TypeError","copyTo","releaseSecureAccess","uris","Promise","resolve","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","Error","nativeModuleErrorInstance","code"],"mappings":"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","sourcesContent":["import { Platform, NativeModules, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\ntype DocumentPickerType = {\n  pick(options: Record<string, any>): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nconst RNDocumentPicker: DocumentPickerType = NativeModules.RNDocumentPicker\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory<OS extends SupportedPlatforms>(\n  params?: Pick<DocumentPickerOptions<OS>, 'presentationStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return RNDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickMultiple<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    ...opts,\n    allowMultiSelection: true,\n  }\n  return pick(options)\n}\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    // @ts-ignore TS2345: Argument of type 'string' is not assignable to parameter of type 'PlatformTypes[OS][keyof PlatformTypes[OS]]'.\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return RNDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return RNDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err instanceof Error && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickMultiple,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"]}